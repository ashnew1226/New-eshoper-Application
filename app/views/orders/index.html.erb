<%= render "form"%>

%div.container
  %h4 Total amount 
  %p â‚¹ #{@total_amount}
  = form_tag({:controller => "orders", :action => "submit" }, {:id => 'order-details'}) do
    %input{id:'order-type', :type=>"hidden", :value=>"stripe", :name=>'user_orders[payment_gateway]'}
      %input{id:'final_price', :type=>"hidden", :value=>@total_amount, :name=>'user_orders[total]'}
    - if @coupon.present?
      %input{id:'coupon_id', :type=>"hidden", :value=>@coupon.id, :name=>'user_orders[coupon_id]'}

    .form_row1
      %h4 Charges/Payments
      - @products_purchase.each do |product|
        %div{'data-charges-and-payments-section': true}
          = radio_button_tag 'user_orders[product_id]', product.id, @products_purchase.first == product
          %input{:id=>"hideid", :type=>"hidden", :value=>1, :name=>:order}
          %span{id: "radioButtonName#{product.id}"} "Your Order"
          %span{id: "radioButtonPrice#{product.id}", :'data-price' => "#{@total_amount}"} #{humanized_money_with_symbol @total_amount}
        %br
      - @products_subscription.each do |product|
        %div
          = radio_button_tag 'user_orders[product_id]', product.id, false
          %span{id: "radioButtonName#{product.id}"} #{product.name}
          %span{id: "radioButtonPrice#{product.id}", :'data-price' => "#{product.price}"} #{humanized_money_with_symbol product.price}
        %br
    %hr
    %h4 Payment Method
    .form_row
      %div
        = radio_button_tag 'payment-selection', 'stripe', true, onclick: "changeTab();"
        %span Stripe
      %br
      %div
        = radio_button_tag 'payment-selection', 'COD', false, onclick: "changeTab();"
        %span COD
      %br
      %br


    %br
    %br
    %div{id:'tab-stripe', class:'paymentSelectionTab active'}
      %div{id:'card-element'}
      %div{id:'card-errors', role:"alert"}
      %br
      %br
      = submit_tag "Buy it!", id: "submit-stripe"
    %div{id:'tab-paypal', class:'paymentSelectionTab'}
      %div{id: "submit-COD"}
    %br
    %br
    %br
    .form_btn
      %input#submit-paypal{"data-disable-with" => "Buy it!", :name => "commit", :type => "submit", :value => "Buy it!"}/
    %hr
:javascript
  function changeTab() {
    var newActiveTabID = $('input[name="payment-selection"]:checked').val();
    console.log(newActiveTabID);
    $('.paymentSelectionTab').removeClass('active');
    $('#tab-' + newActiveTabID).addClass('active');
    if (newActiveTabID == "COD"){
      console.log("inside loop",newActiveTabID);

    }
  }

  (function setupStripe() {
    //Initialize stripe with publishable key
    var stripe = Stripe("pk_test_51ME59WSDCO9rQieo0T1HospsE9qT68whtGjZlHTAGzVUCuqy0h4ZQ4mZV6tM64K6zOzxBOuVNZxXRaDm1gUxnWEW00m2cFhzbH");
    console.log("stripe is"+stripe);
    //Create Stripe credit card elements.
    var elements = stripe.elements();
    var card = elements.create('card');

    //Add a listener in order to check if
    card.addEventListener('change', function(event) {
      //the div card-errors contains error details if any
      var displayError = document.getElementById('card-errors');
      document.getElementById('submit-stripe').disabled = false;
      if (event.error) {
        // Display error
        displayError.textContent = event.error.message;
      } else {
        // Clear error
        displayError.textContent = '';
      }
    });

    // Mount Stripe card element in the #card-element div.
    card.mount('#card-element');
    var form = document.getElementById('order-details');
    // This will be called when the #submit-stripe button is clicked by the user.
    form.addEventListener('submit', function(event) {
      $('#submit-stripe').prop('disabled', true);
      event.preventDefault();
      stripe.createToken(card).then(function(result) {
        if (result.error) {
          // Inform that there was an error.
          var errorElement = document.getElementById('card-errors');
          errorElement.textContent = result.error.message;
        } else {
        // Now we submit the form. We also add a hidden input storing 
    // the token. So our back-end can consume it.
          var $form = $("#order-details");
          // Add a hidden input orders[token]
          $form.append($('<input type="hidden" name="user_orders[token]"/>').val(result.token.id));
          // Set order type
          $('#order-type').val('stripe');
          $form.submit();
        }
      });
      return false;
    });
  }());

    (function setupPaypal() {
    function isPayment() {
      return $('[data-charges-and-payments-section] input[name="orders[product_id]"]:checked').length
    }

    function submitOrderPaypal(chargeID) {
      var $form = $("#order-details");
      // Add a hidden input orders[charge_id]
      $form.append($('<input type="hidden" name="orders[charge_id]"/>').val(chargeID));
      // Set order type
      $('#order-type').val('paypal');
      $form.submit();
    }

    paypal.Buttons({
      env: "#{ENV['PAYPAL_ENV']}",
      createOrder: function() {
      },
      onApprove: function(data) {
      }
    }).render('#submit-paypal');
  }())  

:css
  #card-element {
    width:500px;
  }
  .paymentSelectionTab {
    display: none;
  }
  .paymentSelectionTab.active {
    display: block !important;
  }
  .form_btn {
    display: none;
  }
    .form_btn.active{
    display: block !important;
  }